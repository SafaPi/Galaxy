
package GUI;
//-*- mode:java; encoding:utf-8 -*-
// vim:set fileencoding=utf-8:
//http://ateraimemo.com/Swing/RatingLabel.html
import DAO.EvaluationDAO;
import DAO.ProduitDAO;
import Entity.EvaluationProduit;
import Entity.Produit;
import Entity.User;
import GUI.*;
import static GUI.Evaluation.createAndShowGUI;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.*;
/**
 *
 * @author SafaPC
 */
public class Evaluation extends javax.swing.JFrame {

    /*
     * Creates new form Evaluation
     */
 public Produit produit = new Produit();
 public EvaluationProduit evaluation = new EvaluationProduit();
 
    int selectedRowIndex;
    private static int idIntial = 0;
    private static int rating =0;
    public Evaluation(int id) {
          // super(new GridLayout(2, 2, 4, 4));
        //PI Diagona Icons Pack 1.0 - Download Royalty Free Icons and Stock Images For Web & Graphics Design
        //http://www.freeiconsdownload.com/Free_Downloads.asp?id=60
       idIntial = id;
        ProduitDAO prodDao = new ProduitDAO();

        produit = prodDao.findProduitById(id);

       // for(Produit produit : produits){
            // prd.addItem(produit.getNomProduit());
            // listId.add(produit.getId());
        ImageIcon defaultIcon = new ImageIcon(getClass().getResource("31g.png"));
        ImageProducer ip = defaultIcon.getImage().getSource();

        // 1
        List<ImageIcon> list = Arrays.asList(
            makeStarImageIcon(ip,  1f, .5f, .5f),
            makeStarImageIcon(ip, .5f,  1f, .5f),
            makeStarImageIcon(ip,  1f, .5f,  1f),
            makeStarImageIcon(ip, .5f, .5f,  1f),
            makeStarImageIcon(ip,  1f,  1f, .5f));

        // 4
        ImageIcon yStar = makeStarImageIcon(ip, 1f, 1f, 0f);
        list = Arrays.asList(yStar, yStar, yStar, yStar, yStar);
        add(makeStarRatingPanel("Evaluer", new LevelBar (defaultIcon, list, 1)));
        setPreferredSize(new Dimension(320, 240));
    }
    private JPanel makeStarRatingPanel(String title, final LevelBar label) {
        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));
        p.setBorder(BorderFactory.createTitledBorder(title));
        p.add(new JButton(new AbstractAction("Evaluer") {
            @Override
            public void actionPerformed(ActionEvent e) {
             
                 EvaluationDAO eval = new EvaluationDAO();
                 EvaluationProduit evalprod=new EvaluationProduit();
                 User user = new User();
                 rating= evalprod.getRating();
                LevelBar level = new LevelBar(null,null,rating);
                user.setId(2);
       evalprod.setRating(label.getLevel()+1);
        eval.Evaluer(evalprod,produit,user);   
      dispose();
            }
        }));
       
        
       
        p.add(label);
        return p;
    }
    private static ImageIcon makeStarImageIcon(ImageProducer ip, float rf, float gf, float bf) {
        return new ImageIcon(Toolkit.getDefaultToolkit().createImage(new FilteredImageSource(ip, new GUI.SelectedImageFilter(rf, gf, bf))));
    }

    
    public static void createAndShowGUI() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException
               | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        }
        JFrame frame = new JFrame("RatingLabel");
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
     //frame.getContentPane().add(new Evaluation(id));
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 715, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 508, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Evaluation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Evaluation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Evaluation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Evaluation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
       EventQueue.invokeLater(new Runnable() {
            @Override public void run() {
                createAndShowGUI();
           //new Evaluation(idIntial).setVisible(true);

            }
        });
    }
class LevelBar extends JPanel implements MouseListener, MouseMotionListener {
    private final int gap;
    protected final List<ImageIcon> iconList;
    protected final List<JLabel> labelList = Arrays.asList(
        new JLabel(), new JLabel(), new JLabel(), new JLabel(), new JLabel()
    );
    protected final ImageIcon defaultIcon;
    private int clicked = -1;
    
    public LevelBar(ImageIcon defaultIcon, List<ImageIcon> list, int gap) {
        super(new GridLayout(1, 5, gap * 2, gap * 2));
        this.defaultIcon = defaultIcon;
        this.iconList = list;
        this.gap = gap;
        for (JLabel l: labelList) {
            l.setIcon(defaultIcon);
            add(l);
        }
        addMouseListener(this);
        addMouseMotionListener(this);
        
    }
    public int getLevel() {
        return clicked;
    }
    public void setLevel(int l) {
        clicked = l;
        repaintIcon(clicked);
    }
     
    private int getSelectedIconIndex(Point p) {
        for (int i = 0; i < labelList.size(); i++) {
            Rectangle r = labelList.get(i).getBounds();
            r.grow(gap, gap);
            if (r.contains(p)) {
                return i;
            }
        }
        return -1;
    }
    protected void repaintIcon(int index) {
        for (int i = 0; i < labelList.size(); i++) {
            labelList.get(i).setIcon(i <= index ? iconList.get(i) : defaultIcon);
        }
        repaint();
    }
    @Override public void mouseMoved(MouseEvent e) {
        repaintIcon(getSelectedIconIndex(e.getPoint()));
    }
    public void mouseEntered(MouseEvent e) {
        repaintIcon(getSelectedIconIndex(e.getPoint()));
    }
    public void mouseClicked(MouseEvent e) {
        clicked = getSelectedIconIndex(e.getPoint());
    }
    public void mouseExited(MouseEvent e) {
        repaintIcon(clicked);
    }
     public void mouseDragged(MouseEvent e)  { /* not needed */ }
    public void mousePressed(MouseEvent e)  { /* not needed */ }
    public void mouseReleased(MouseEvent e) { /* not needed */ }

    
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    }
